#include "the1.h"

// DO NOT CHANGE ABOVE THIS LINE!
// you may implement helper functions below

std::pair<int, int> partition(unsigned short *arr, const unsigned int size, long &swap,int low,int high) {
    int i = low+1;
    int j = low+1;
    int k = high;
    
    int pivot = arr[low];
    while (j <= k) {
        if (arr[j] == pivot) {
            j++;
        } else if (arr[j] < pivot) {
            std::swap(arr[i], arr[j]);
            swap++;
            i++;
            j++;
        } else if (arr[j] > pivot) {
            std::swap(arr[j], arr[k]);
            swap++;
            k--;
        }
    }
    std::swap(arr[i - 1], arr[low]);
    swap++;
    return std::make_pair(i - 1, j);
}

void helper(unsigned short *arr,const unsigned int size,const unsigned int index,
                                 long &swap,
                                unsigned int &rec_calls,
                                int low,
                                int high) {
    rec_calls++;  
    
    
    
    
    
    if(low<high){
        std::pair<int, int> result = partition(arr, size, swap,low,high);
        int l = result.first;
        int r = result.second;
        helper(arr, size , index, swap, rec_calls,low,l-1);
        helper(arr, size, index, swap, rec_calls,r,high);
    }
    
    
 
    
}


std::pair<unsigned short, unsigned int> select_k_with_quick_sort3(unsigned short *arr,
                                                                  const unsigned int size,
                                                                  const unsigned int index,
                                                                  long &swap) {
    unsigned int rec_calls = 0; 
    helper(arr, size, index, swap, rec_calls,0,size-1);
    return std::make_pair(arr[index],rec_calls);
}

void helper2(unsigned short *arr,const unsigned int size,const unsigned int index,
                                 long &swap,
                                unsigned int &rec_calls,
                                int low,
                                int high) {
    rec_calls++;  
    
    
    if(low<high){
        std::pair<int, int> result = partition(arr, size, swap,low,high);
        int l = result.first;
        int r = result.second;
        if(index<l)
        helper2(arr, size , index, swap, rec_calls,low,l-1);
        else if(index>=r)
        helper2(arr, size, index, swap, rec_calls,r,high);
    }
    
    
 
    
}


std::pair<unsigned short, unsigned int> quick_select3(unsigned short *arr,
                                                      const unsigned int size,
                                                      const unsigned int index,
                                                      long &swap){
    unsigned int rec_calls = 0; 
    helper2(arr, size, index, swap, rec_calls,0,size-1);
    return std::make_pair(arr[index],rec_calls);
    
    
    
}
